name: Docker

on:
  release:
    types: [published]
    
env:
  DOCKER_ORG: ${{ github.actor }}
  DOCKER_TITEL: Pelican Panel
  DOCKER_DESC: Modified Pelican Panel for Unraid
  DOCKER_PACKAGE: pelican-panel
  DOCKER_LATEST: test-gitea-compat
      
jobs:
  build-php-base:
    name: Build PHP base image on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
            platform: linux/amd64
          - os: ubuntu-24.04-arm
            arch: arm64
            platform: linux/arm64
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build the base PHP image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.base
          push: false
          load: true
          platforms: ${{ matrix.platform }}
          tags: base-php:${{ matrix.arch }}
          cache-from: type=gha,scope=base-php${{ matrix.arch }}
          cache-to: type=gha,scope=base-php${{ matrix.arch }}

      - name: Export image to file
        run: docker save -o base-php-${{ matrix.arch }}.tar base-php:${{ matrix.arch }}
      
      - name: Push the docker build to the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: base-php-${{ matrix.arch }}.tar
          path: base-php-${{ matrix.arch }}.tar
          retention-days: 7

  build-and-push:
    name: Build and Push ubuntu-24.04
    runs-on: ubuntu-24.04
    needs: build-php-base
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
    # Start a temp local registry because workflow can not pull from localy loaded images
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000 
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Get Meta
        id: meta
        run: |
          echo REPO=$(echo ${{ github.actor }} | awk '{print tolower($0)}') >> $GITHUB_OUTPUT
          #echo REPO_NAME=$(echo ${GITHUB_REPOSITORY} | awk -F"/" '{print $2}') >> $GITHUB_OUTPUT
          echo REPO_NAME=$(echo ${{ env.DOCKER_PACKAGE }}) >> $GITHUB_OUTPUT
          echo REPO_VERSION=$(git describe --tags --always | sed 's/^v//') >> $GITHUB_OUTPUT            
          echo DATE=$(date) >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      # We Need to start it in host mode else it can't acces the local registry on port 5000
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.PASSWORD_DOCKERHUB }}

      - name: Login to GitHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.PASSWORD_GITHUB }}

        # Download the base PHP image AMD64
      - uses: actions/download-artifact@v4
        with:
          name: base-php-amd64.tar
        
        # Download the base PHP image ARM64
      - uses: actions/download-artifact@v4
        with:
          name: base-php-arm64.tar

      - name: Load base images into local registry
        run: |
          docker load -i base-php-amd64.tar
          docker load -i base-php-arm64.tar
          docker tag base-php:amd64 localhost:5000/base-php:amd64
          docker tag base-php:arm64 localhost:5000/base-php:arm64
          docker push localhost:5000/base-php:amd64
          docker push localhost:5000/base-php:arm64
          rm base-php-arm64.tar base-php-amd64.tar


      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          build-args: |
             VERSION=1.0.0-${{ steps.meta.outputs.REPO_VERSION }}
          platforms: |
            linux/amd64
            linux/arm64
          push: true
          tags: |
            magnon.ovh/${{ steps.meta.outputs.REPO }}/${{ steps.meta.outputs.REPO_NAME }}:${{ steps.meta.outputs.REPO_VERSION }}
            magnon.ovh/${{ steps.meta.outputs.REPO }}/${{ steps.meta.outputs.REPO_NAME }}:${{ env.DOCKER_LATEST }}
          labels: |
            org.opencontainers.image.authors=${{ github.actor }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.title=${{ env.DOCKER_TITEL }}
            org.opencontainers.image.description=${{ env.DOCKER_DESC }}
            org.opencontainers.image.created=${{ steps.meta.outputs.DATE }}
            org.opencontainers.image.version=${{ steps.meta.outputs.REPO_VERSION }}
          provenance: false
          outputs: |
            type=image,name=target,annotation-index.org.opencontainers.image.authors=${{ github.actor }},annotation-index.org.opencontainers.image.title=${{ env.DOCKER_TITEL }},annotation-index.org.opencontainers.image.description=${{ env.DOCKER_DESC }},annotation-index.org.opencontainers.image.source=https://github.com/${{ github.repository }},annotation-index.org.opencontainers.image.created=${{ steps.meta.outputs.DATE }},annotation-index.org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }},annotation-manifest.org.opencontainers.image.authors=${{ github.actor }},annotation-manifest.org.opencontainers.image.title=${{ env.DOCKER_TITEL }},annotation-manifest.org.opencontainers.image.description=${{ env.DOCKER_DESC }},annotation-manifest.org.opencontainers.image.source=https://github.com/${{ github.repository }},annotation-manifest.org.opencontainers.image.created=${{ steps.meta.outputs.DATE }},annotation-manifest.org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
  
